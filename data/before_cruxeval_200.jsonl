{"code": "def f(nums):\n    output = []\n    for n in nums:\n        output.append((nums.count(n), n))\n    output.sort(reverse=True)\n    return output", "input": "[1, 1, 3, 1, 3, 1]", "output": "[(4, 1), (4, 1), (4, 1), (4, 1), (2, 3), (2, 3)]", "id": "sample_0"}
{"code": "def f(text, value):\n    text_list = list(text)\n    text_list.append(value)\n    return ''.join(text_list)", "input": "'bcksrut', 'q'", "output": "'bcksrutq'", "id": "sample_3"}
{"code": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return count, ''.join(new_text)", "input": "'DSUWeqExTQdCMGpqur', 'a', 'x'", "output": "(0, 'xxxxxxxxxxxxxxxxxx')", "id": "sample_5"}
{"code": "def f(dic):\n    for k,v in sorted(dic.items(), key=lambda x: len(str(x)))[:-1]:\n        dic.pop(k)\n    return list(dic.items())", "input": "{'11': 52, '65': 34, 'a': 12, '4': 52, '74': 31}", "output": "[('74', 31)]", "id": "sample_6"}
{"code": "def f(list):\n    original = list[:]\n    while len(list) > 1:\n        list.pop(len(list) - 1)\n        for i in range(len(list)):\n            list.pop(i)\n    list = original[:]\n    if list:\n        list.pop(0)\n    return list", "input": "[]", "output": "[]", "id": "sample_7"}
{"code": "def f(text):\n    new_text = ''\n    for ch in text.lower().strip():\n        if ch.isnumeric() or ch in 'ÄäÏïÖöÜü':\n            new_text += ch\n    return new_text", "input": "''", "output": "''", "id": "sample_10"}
{"code": "def f(names):\n    count = len(names)\n    numberOfNames = 0\n    for i in names:\n        if i.isalpha():\n            numberOfNames += 1\n    return numberOfNames", "input": "['sharron', 'Savannah', 'Mike Cherokee']", "output": "2", "id": "sample_13"}
{"code": "def f(array):\n    n = array.pop()\n    array.extend([n, n])\n    return array", "input": "[1, 1, 2, 2]", "output": "[1, 1, 2, 2, 2]", "id": "sample_21"}
{"code": "def f(s, sep):\n    reverse = ['*' + e for e in s.split(sep)]\n    return ';'.join(reversed(reverse))", "input": "'volume', 'l'", "output": "'*ume;*vo'", "id": "sample_32"}
{"code": "def f(lists):\n    dic = {}\n    for n in lists:\n        if n in dic:\n            dic[n].append(lists.pop(lists.index(n)))\n        else:\n            dic[n] = lists[:lists.index(n) + 1]\n    return str(dic).replace(' ', '')", "input": "[5, 2, 7, 2, 3, 5]", "output": "'{5:[5,5],2:[5,2,2],7:[5,2,7]}'", "id": "sample_33"}
{"code": "def f(text, chars):\n    return text.rstrip(chars) if text else text", "input": "'ha', ''", "output": "'ha'", "id": "sample_36"}
{"code": "def f(text):\n    text_arr = []\n    for j in range(len(text)):\n        text_arr.append(text[j:])\n    return text_arr", "input": "'123'", "output": "['123', '23', '3']", "id": "sample_37"}
{"code": "def f(array, elem):\n    if elem in array:\n        return array.index(elem)\n    return -1", "input": "[6, 2, 7, 1], 6", "output": "0", "id": "sample_39"}
{"code": "def f(text):\n    if text.isidentifier():\n        return ''.join(c for c in text if c.isdigit())\n    else:\n        return ''.join(text)", "input": "'816'", "output": "'816'", "id": "sample_49"}
{"code": "def f(text):\n    a = []\n    for i in range(len(text)):\n        if not text[i].isdecimal():\n            a.append(text[i])\n    return ''.join(a)", "input": "\"seiq7229 d27\"", "output": "'seiq d'", "id": "sample_52"}
{"code": "def f(text, s, e):\n    sublist = text[s:e]\n    if not sublist:\n        return -1\n    return sublist.index(min(sublist))", "input": "'happy', 0, 3", "output": "1", "id": "sample_54"}
{"code": "def f(sentence):\n    for c in sentence:\n        if c.isascii() is False:\n            return False\n        else:\n            continue\n    return True", "input": "'1z1z1'", "output": "True", "id": "sample_56"}
{"code": "def f(text, size):\n    counter = len(text)\n    for i in range(size-int(size%2)):\n        text = ' '+text+' '\n        counter += 2\n        if counter >= size:\n            return text", "input": "\"7\", 10", "output": "'     7     '", "id": "sample_64"}
{"code": "def f(text, prefix):\n    prefix_length = len(prefix)\n    if text.startswith(prefix):\n        return text[(prefix_length - 1) // 2:\n                    (prefix_length + 1) // 2 * -1:-1]\n    else:\n        return text", "input": "'happy', 'ha'", "output": "''", "id": "sample_66"}
{"code": "def f(num1, num2, num3):\n    nums = [num1, num2, num3]\n    nums.sort()    \n    return f'{nums[0]},{nums[1]},{nums[2]}'", "input": "6,8,8", "output": "'6,8,8'", "id": "sample_67"}
{"code": "def f(lst, i, n):\n    lst.insert(i, n)\n    return lst", "input": "[44, 34, 23, 82, 24, 11, 63, 99], 4, 15", "output": "[44, 34, 23, 82, 15, 24, 11, 63, 99]", "id": "sample_74"}
{"code": "def f(text, character):\n    subject = text[text.rfind(character):]\n    return subject*text.count(character)", "input": "'h ,lpvvkohh,u', 'i'", "output": "''", "id": "sample_77"}
{"code": "def f(a, b, c, d):\n    return a and b or c and d", "input": "'CJU', 'BFS', 'WBYDZPVES', 'Y'", "output": "'BFS'", "id": "sample_82"}
{"code": "def f(char):\n    if char not in 'aeiouAEIOU':\n        return None\n    if char in 'AEIOU':\n        return char.lower()\n    return char.upper()", "input": "'o'", "output": "'O'", "id": "sample_89"}
{"code": "def f(text):\n    return text.isascii()", "input": "'wW의IV]HDJjhgK[dGIUlVO@Ess$coZkBqu[Ct'", "output": "False", "id": "sample_92"}
{"code": "def f(lst):\n    lst.clear()\n    for i in lst:\n        if i == 3:\n            return False\n    else:\n        return True", "input": "[2, 0]", "output": "True", "id": "sample_97"}
{"code": "def f(s):\n    return ''.join((c.casefold() for c in s))", "input": "'abcDEFGhIJ'", "output": "'abcdefghij'", "id": "sample_103"}
{"code": "def f(numbers):\n    for i in range(len(numbers)):\n        if numbers.count('3') > 1:\n            return i\n    return -1", "input": "\"23157\"", "output": "-1", "id": "sample_117"}
{"code": "def f(text):\n    result = \"\"\n    for i in range(len(text)):\n        if i % 2 == 0:\n            result += text[i].swapcase()\n        else:\n            result += text[i]\n    return result", "input": "\"vsnlygltaw\"", "output": "'VsNlYgLtAw'", "id": "sample_119"}
{"code": "def f(s):\n    nums = ''.join(filter(lambda c:c.isdecimal(), s))\n    if nums == '': return 'none'\n    m = max([int(num) for num in nums.split(',')])\n    return str(m)", "input": "'01,001'", "output": "'1001'", "id": "sample_121"}
{"code": "def f(text):\n    s = text.rpartition('o')\n    div, div2 = (s[0] == '' and '-' or s[0]), (s[2] == '' and '-' or s[2])\n    return s[1] + div + s[1] + div2", "input": "'kkxkxxfck'", "output": "'-kkxkxxfck'", "id": "sample_126"}
{"code": "def f(text):\n    s = text.splitlines()\n    return len(s)", "input": "\"145\\n\\n12fjkjg\"", "output": "3", "id": "sample_127"}
{"code": "def f(text, search_string):\n    indexes = []\n    while search_string in text:\n        indexes.append(text.rindex(search_string))\n        text = text[:text.rindex(search_string)]\n    return indexes", "input": "'ONBPICJOHRHDJOSNCPNJ9ONTHBQCJ', 'J'", "output": "[28, 19, 12, 6]", "id": "sample_129"}
{"code": "def f(n):\n    t = 0\n    b = ''\n    digits = list(map(int, str(n)))\n    for d in digits:\n        if d == 0: t += 1\n        else: break\n    for _ in range(t):\n        b += str(1) + '0' + str(4)\n    b += str(n)\n    return b", "input": "372359", "output": "'372359'", "id": "sample_134"}
{"code": "def f(st):\n    if st.lower().rindex('h', st.lower().rindex('i')) >= st.lower().rindex('i'):\n        return 'Hey'\n    else:\n        return 'Hi'", "input": "'Hi there'", "output": "'Hey'", "id": "sample_140"}
{"code": "def f(li):\n    return [li.count(i) for i in li]", "input": "['k', 'x', 'c', 'x', 'x', 'b', 'l', 'f', 'r', 'n', 'g']", "output": "[1, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1]", "id": "sample_141"}
{"code": "def f(vectors):\n    sorted_vecs = []\n    for vec in vectors:\n        vec.sort()\n        sorted_vecs.append(vec)\n    return sorted_vecs", "input": "[]", "output": "[]", "id": "sample_144"}
{"code": "def f(nums):\n    middle = len(nums)//2\n    return nums[middle:] + nums[0:middle]", "input": "[1, 1, 1]", "output": "[1, 1, 1]", "id": "sample_147"}
{"code": "def f(text):\n    n = 0\n    for char in text:\n        if char.isupper():\n            n += 1\n    return n", "input": "''.join(['A'] * 20)", "output": "20", "id": "sample_152"}
{"code": "def f(text, suffix, num):\n    str_num = str(num)\n    return text.endswith(suffix + str_num)", "input": "'friends and love', 'and', 3", "output": "False", "id": "sample_153"}
{"code": "def f(phrase):\n    ans = 0\n    for w in phrase.split():\n        for ch in w:\n            if ch == \"0\":\n                ans += 1\n    return ans", "input": "\"aboba 212 has 0 digits\"", "output": "1", "id": "sample_157"}
{"code": "def f(arr):\n    n = [item for item in arr if item%2 == 0]\n    m = n+arr\n    for i in m:\n        if m.index(i) >= len(n):\n            m.remove(i)\n    return m", "input": "[3, 6, 4, -2, 5]", "output": "[6, 4, -2, 6, 4, -2]", "id": "sample_158"}
{"code": "def f(graph):\n    new_graph = {}\n    for key, value in graph.items():\n        new_graph[key] = {}\n        for subkey in value:\n            new_graph[key][subkey] = ''\n    return new_graph", "input": "{}", "output": "{}", "id": "sample_166"}
{"code": "def f(nums):\n    count = len(nums) // 2\n    for _ in range(count):\n        nums.pop(0)\n    return nums", "input": "[3, 4, 1, 2, 3]", "output": "[1, 2, 3]", "id": "sample_171"}
{"code": "def f(text):\n    text = list(text)\n    for i in range(len(text)):\n        if i % 2 == 1:\n            text[i] = text[i].swapcase()\n    return ''.join(text)", "input": "'Hey DUdE THis $nd^ &*&this@#'", "output": "'HEy Dude tHIs $Nd^ &*&tHiS@#'", "id": "sample_177"}
{"code": "def f(nums):\n    # Pass in a copy to avoid modifying nums\n    nums = nums[:]\n    count = len(nums)\n    for i in range(-count+1, 0):\n        nums.insert(0, nums[i])\n    return nums", "input": "[7, 1, 2, 6, 0, 2]", "output": "[2, 0, 6, 2, 1, 7, 1, 2, 6, 0, 2]", "id": "sample_179"}
{"code": "def f(dic):\n    return sorted(dic.items(), key=lambda x: x[0])", "input": "{'b': 1, 'a': 2}", "output": "[('a', 2), ('b', 1)]", "id": "sample_182"}
{"code": "def f(out, mapping):\n    for key in mapping:\n        out.format_map(mapping)\n        if len(re.findall(r'{\\w}', out)) == 0:\n            break\n        mapping[key][1] = mapping[key][1][::-1]\n    return out", "input": "\"{{{{}}}}\", {}", "output": "'{{{{}}}}'", "id": "sample_189"}
{"code": "def f(matr, insert_loc):\n    matr.insert(insert_loc, [])\n    return matr", "input": "[[5, 6, 2, 3], [1, 9, 5, 6]], 0", "output": "[[], [5, 6, 2, 3], [1, 9, 5, 6]]", "id": "sample_194"}
{"code": "def f(text):\n    text = text.replace(' x', ' x.')\n    if text.istitle(): return 'correct'\n    text = text.replace(' x.', ' x')\n    return 'mixed'", "input": "\"398 Is A Poor Year To Sow\"", "output": "'correct'", "id": "sample_196"}
{"code": "def f(temp, timeLimit):\n    s = timeLimit // temp\n    e = timeLimit % temp\n    return [f'{e} oC', f'{s} {e}'][s > 1]", "input": "1, 1234567890", "output": "'1234567890 0'", "id": "sample_197"}
{"code": "def f(text):\n    chars = []\n    for c in text:\n        if c.isdigit():\n            chars.append(c)\n    return ''.join(chars[::-1])", "input": "'--4yrw 251-//4 6p'", "output": "'641524'", "id": "sample_201"}
{"code": "def f(d):\n    d.clear()\n    return d", "input": "{'a': 3, 'b': -1, 'c': 'Dum'}", "output": "{}", "id": "sample_203"}
{"code": "def f(s):\n    count = 0\n    for c in s:\n        if s.rindex(c) != s.index(c):\n            count+=1\n    return count", "input": "\"abca dea ead\"", "output": "10", "id": "sample_211"}
{"code": "def f(nums):\n    for i in range(len(nums)):\n        if nums[i] % 3 == 0:\n            nums.append(nums[i])\n    return nums", "input": "[1, 3]", "output": "[1, 3, 3]", "id": "sample_226"}
{"code": "def f(text):\n    text = text.lower()\n    head, tail = text[0], text[1:]\n    return head.upper() + tail", "input": "'Manolo'", "output": "'Manolo'", "id": "sample_227"}
{"code": "def f(dic, value):\n    result = []\n    for e in dic:\n        result.append(e[0])\n        if e[1] == value:\n            result.reverse()\n        else:\n            result.append(e[1])\n    return result", "input": "{'9m':2, 'mA':1, '10K':2, 'Lk':2}, 1", "output": "['9', 'm', 'm', 'A', '1', '0', 'L', 'k']", "id": "sample_229"}
{"code": "def f(text, symbols):\n    count = 0\n    if symbols:\n        for i in symbols:\n            count += 1\n        text = text * count\n    return text.rjust(len(text) + count*2)[:-2]", "input": "'', 'BC1ty'", "output": "'        '", "id": "sample_244"}
{"code": "def f(s):\n    count = {}\n    for i in s:\n        if i.islower():\n            count[i.lower()] = s.count(i.lower()) + count.get(i.lower(), 0)\n        else:\n            count[i.lower()] = s.count(i.upper()) + count.get(i.lower(), 0)\n    return count", "input": "\"FSA\"", "output": "{'f': 1, 's': 1, 'a': 1}", "id": "sample_249"}
{"code": "thigh_o_one = [1, 2, 7, 8, 9]\nthigh_o_two = [1, 2, 7, 9]\ndef f(L, m, start, step):\n    L.insert(start, m)\n    for x in range(start-1, 0, -step):\n        start -= 1\n        L.insert(start, L.pop(L.index(m)-1))\n    return L", "input": "thigh_o_two[:], 3, 3, 2", "output": "[1, 2, 7, 3, 9]", "id": "sample_258"}
{"code": "def f(text):\n    new_text = []\n    for character in text:\n        if character.isupper():\n            new_text.insert(len(new_text) // 2, character)\n    if len(new_text) == 0:\n        new_text = ['-']\n    return ''.join(new_text)", "input": "'String matching is a big part of RexEx library.'", "output": "'RES'", "id": "sample_259"}
{"code": "def f(nums, start, k):\n    nums[start:start+k] = nums[start:start + k][::-1]\n    return nums", "input": "[1, 2, 3, 4, 5, 6], 4, 2", "output": "[1, 2, 3, 4, 6, 5]", "id": "sample_260"}
{"code": "def f(nums):\n    count = len(nums)\n    score = {0: \"F\", 1: \"E\", 2: \"D\", 3: \"C\", 4: \"B\", 5: \"A\", 6: \"\"}\n    result = []\n    for i in range(count):\n        result.append(score.get(nums[i]))\n    return ''.join(result)", "input": "[4, 5]", "output": "'BA'", "id": "sample_262"}
{"code": "def f(test_str):\n    s = test_str.replace('a', 'A')\n    return s.replace('e', 'A')", "input": "\"papera\"", "output": "'pApArA'", "id": "sample_264"}
{"code": "def f(a):\n    if len(a) >= 2 and a[0] > 0 and a[1] > 0:\n        a.reverse()\n        return a\n    a.append(0)\n    return a", "input": "[]", "output": "[0]", "id": "sample_276"}
{"code": "def f(c, index, value):\n    c[index] = value\n    if value >= 3:\n        c.update({'message' : 'xcrWt'})\n    else: \n        del c['message']\n    return c", "input": "{1: 2, 3: 4, 5: 6, 'message': 'qrTHo'}, 8, 2", "output": "{1: 2, 3: 4, 5: 6, 8: 2}", "id": "sample_281"}
{"code": "def f(s1, s2):\n    position = 1\n    count = 0\n    while position > 0:\n        position = s1.find(s2, position)\n        count += 1\n        position += 1\n    return count", "input": "'xinyyexyxx', 'xx'", "output": "2", "id": "sample_282"}
{"code": "def f(dictionary, key):\n    del dictionary[key]\n    if min(dictionary) == key:\n        key = list(dictionary)[0]\n    return key", "input": "{'Iron Man': 4, 'Captain America': 3, 'Black Panther': 0,'Thor': 1, 'Ant-Man': 6}, 'Iron Man'", "output": "'Iron Man'", "id": "sample_283"}
{"code": "def f(text, ch):\n    \"\"\"Counting vowels in Pirates' Curse\"\"\"\n    return text.count(ch)", "input": "\"This be Pirate's Speak for 'help'!\", ' '", "output": "5", "id": "sample_285"}
{"code": "def f(fruits):\n    if fruits[-1] == fruits[0]:\n        return 'no'\n    else:\n        fruits.pop(0)\n        fruits.pop()\n        fruits.pop(0)\n        fruits.pop()\n        return fruits", "input": "['apple', 'apple', 'pear', 'banana', 'pear', 'orange', 'orange']", "output": "['pear', 'banana', 'pear']", "id": "sample_295"}
{"code": "def f(string):\n    return string.replace('needles', 'haystacks')", "input": "'wdeejjjzsjsjjsxjjneddaddddddefsfd'", "output": "'wdeejjjzsjsjjsxjjneddaddddddefsfd'", "id": "sample_302"}
{"code": "def f(strings):\n    occurances = {}\n    for string in strings:\n        if string not in occurances:\n            occurances[string] = strings.count(string)\n    return occurances", "input": "[\"La\", \"Q\", \"9\", \"La\", \"La\"]", "output": "{'La': 3, 'Q': 1, '9': 1}", "id": "sample_308"}
{"code": "def f(strands):\n    subs = strands\n    for i, j in enumerate(subs):\n        for _ in range(len(j) // 2):\n            subs[i] = subs[i][-1:] + subs[i][1:-1] + subs[i][0]\n    return ''.join(subs)", "input": "['__', '1', '.', '0', 'r0', '__', 'a_j', '6', '__', '6']", "output": "'__1.00r__j_a6__6'", "id": "sample_310"}
{"code": "def f(text):\n    if ',' in text:\n        before, _, after = text.partition(',')\n        return after + ' ' + before\n    return ',' + text.partition(' ')[-1] + ' 0'", "input": "'244, 105, -90'", "output": "' 105, -90 244'", "id": "sample_314"}
{"code": "def f(text):\n    index = 1\n    while index < len(text):\n        if text[index] != text[index - 1]:\n            index += 1\n        else:\n            text1 = text[:index]\n            text2 = text[index:].swapcase()\n            return text1 + text2\n    return text.swapcase()", "input": "'USaR'", "output": "'usAr'", "id": "sample_320"}
{"code": "def f(nums):\n    asc, desc = nums.copy(), []\n    asc.reverse()\n    desc = asc[:len(asc)//2]\n    return desc + asc + desc", "input": "[]", "output": "[]", "id": "sample_324"}
{"code": "def f(lst):\n    new = list()\n    i = len(lst)-1\n    for _ in range(len(lst)):\n        if i%2 == 0:\n            new.append(-lst[i])\n        else:\n            new.append(lst[i])\n        i -= 1\n    return new", "input": "[1, 7, -1, -3]", "output": "[-3, 1, 7, -1]", "id": "sample_327"}
{"code": "def f(nums):\n    count = len(nums)\n    if count == 0:\n        nums = [0] * int(nums.pop())\n    elif count % 2 == 0:\n        nums.clear()\n    else:\n        del nums[:count//2:]\n    return nums", "input": "[-6, -2, 1, -3, 0, 1]", "output": "[]", "id": "sample_332"}
{"code": "def f(a, b):\n    return a.join(b)", "input": "'00', ['nU', ' 9 rCSAz', 'w', ' lpA5BO', 'sizL', 'i7rlVr']", "output": "'nU00 9 rCSAz00w00 lpA5BO00sizL00i7rlVr'", "id": "sample_334"}
{"code": "def f(my_dict):\n    result = {v: k for k, v in my_dict.items()}\n    return result", "input": "{'a': 1, 'b': 2, 'c': 3, 'd': 2}", "output": "{1: 'a', 2: 'd', 3: 'c'}", "id": "sample_338"}
{"code": "def f(cart):\n    while len(cart) > 5:\n        cart.popitem()\n    return cart", "input": "{}", "output": "{}", "id": "sample_341"}
{"code": "def f(array, elem):\n    array.extend(elem)\n    return array", "input": "[[1, 2, 3], [1, 2], 1], [[1, 2, 3], 3, [2, 1]]", "output": "[[1, 2, 3], [1, 2], 1, [1, 2, 3], 3, [2, 1]]", "id": "sample_343"}
{"code": "def f(description, values):\n    if values[1] is None:\n        values = values[0:1]\n    else:\n        values = values[1:]\n    return description.format(*values)", "input": "'{0}, {0}!!!', ['R', None]", "output": "'R, R!!!'", "id": "sample_354"}
{"code": "def f(array, num):\n    reverse = False\n    if num < 0:\n        reverse = True\n        num *= -1\n    array = array[::-1] * num\n    l = len(array)\n    \n    if reverse:\n        array = array[::-1]\n    return array", "input": "[1, 2], 1", "output": "[2, 1]", "id": "sample_356"}
{"code": "def f(s):\n    r = []\n    for i in range(len(s) - 1, 0 - 1, -1):\n        r += s[i]\n    return ''.join(r)", "input": "'crew'", "output": "'werc'", "id": "sample_357"}
{"code": "def f(text):\n    return text.split(':')[0].count('#')", "input": "\"#! : #!\"", "output": "1", "id": "sample_361"}
{"code": "def f(n, s):\n    if s.startswith(n):\n        pre, _ = s.split(n, 1)\n        return pre + n + s[len(n):]\n    return s", "input": "'xqc', 'mRcwVqXsRDRb'", "output": "'mRcwVqXsRDRb'", "id": "sample_365"}
{"code": "def f(text):\n    for char in text:\n        if not char.isspace():\n            return False\n    return True", "input": "'     i'", "output": "False", "id": "sample_370"}
{"code": "def f(list_, num):\n    temp = []\n    for i in list_:\n        i = num // 2 * ('%s,' % i)\n        temp.append(i)\n    return temp", "input": "['v'], 1", "output": "['']", "id": "sample_372"}
{"code": "def f(nums):\n    for i in range(len(nums) - 1, -1, -3):\n        if nums[i] == 0:\n            nums.clear()\n            return False\n    return nums", "input": "[0, 0, 1, 2, 1]", "output": "False", "id": "sample_379"}
{"code": "def f(text, num_digits):\n    width = max(1, num_digits)\n    return text.zfill(width)", "input": "'19', 5", "output": "'00019'", "id": "sample_381"}
{"code": "def f(text, chars):\n    chars = list(chars)\n    text = list(text)\n    new_text = text\n    while len(new_text) > 0 and text:\n        if new_text[0] in chars:\n            new_text = new_text[1:]\n        else:\n            break \n    return ''.join(new_text)", "input": "'asfdellos', 'Ta'", "output": "'sfdellos'", "id": "sample_384"}
{"code": "def f(students):\n    seatlist = students\n    seatlist.reverse()\n    cnt = 0\n    for cnt in range(len(seatlist)):\n        cnt += 2\n        seatlist[cnt - 1:cnt] = ['+']\n    seatlist.append('+')\n    return seatlist", "input": "['r', '9']", "output": "['9', '+', '+', '+']", "id": "sample_391"}
{"code": "def f(s):\n    for i in range(len(s)):\n        if s[i].isdecimal():\n            return i + (s[i] == '0')\n        elif s[i] == '0':\n            return -1\n    return -1", "input": "\"11\"", "output": "0", "id": "sample_395"}
{"code": "def f(ls):\n    return dict.fromkeys(ls, 0)", "input": "['x', 'u', 'w', 'j', 3, 6]", "output": "{'x': 0, 'u': 0, 'w': 0, 'j': 0, 3: 0, 6: 0}", "id": "sample_397"}
{"code": "def f(text, suffix):\n    if suffix and text.endswith(suffix):\n        return text[:- len(suffix)]\n    return text", "input": "'mathematics', 'example'", "output": "'mathematics'", "id": "sample_401"}
{"code": "def f(full, part):\n    length = len(part)\n    index = full.find(part)\n    count = 0\n    while index >= 0:\n        full = full[index + length:]\n        index = full.find(part)\n        count += 1\n    return count", "input": "'hrsiajiajieihruejfhbrisvlmmy', 'hr'", "output": "2", "id": "sample_403"}
{"code": "def f(m):\n    m.reverse()\n    return m", "input": "[-4, 6, 0, 4, -7, 2, -1]", "output": "[-1, 2, -7, 4, 0, 6, -4]", "id": "sample_408"}
{"code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()\n    return text", "input": "'querist', 'u'", "output": "'querisT'", "id": "sample_409"}
{"code": "def f(nums):\n    a = 0\n    for i in range(len(nums)):\n        nums.insert(i, nums[a])\n        a += 1\n    return nums", "input": "[1, 3, -1, 1, -2, 6]", "output": "[1, 1, 1, 1, 1, 1, 1, 3, -1, 1, -2, 6]", "id": "sample_410"}
{"code": "def f(text, old, new):\n    index = text.rfind(old, 0, text.find(old))\n    result = list(text)\n    while index > 0:\n        result[index:index+len(old)] = new\n        index = text.rfind(old, 0, index)\n    return ''.join(result)", "input": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq', 'j', '1'", "output": "'jysrhfm ojwesf xgwwdyr dlrul ymba bpq'", "id": "sample_416"}
{"code": "def f(text, value):\n    if not value in text:\n        return ''\n    return text.rpartition(value)[0]", "input": "'mmfbifen', 'i'", "output": "'mmfb'", "id": "sample_419"}
{"code": "def f(text):\n    try:\n        return text.isalpha()\n    except:\n        return False", "input": "\"x\"", "output": "True", "id": "sample_420"}
{"code": "def f(selfie):\n    lo = len(selfie)\n    for i in range(lo-1, -1, -1):\n        if selfie[i] == selfie[0]:\n            selfie.remove(selfie[lo-1])\n    return selfie", "input": "[4, 2, 5, 1, 3, 2, 6]", "output": "[4, 2, 5, 1, 3, 2]", "id": "sample_423"}
{"code": "def f(numbers, num, val):\n    while len(numbers) < num:\n        numbers.insert(len(numbers) // 2, val)\n    for _ in range(len(numbers) // (num - 1) - 4):\n        numbers.insert(len(numbers) // 2, val)\n    return ' '.join(numbers)", "input": "[], 0, 1", "output": "''", "id": "sample_435"}
{"code": "def f(value):\n    parts = value.partition(' ')[::2]\n    return ''.join(parts)", "input": "'coscifysu'", "output": "'coscifysu'", "id": "sample_439"}
{"code": "def f(text):\n    if text.isdecimal():\n        return 'yes'\n    else:\n        return 'no'", "input": "\"abc\"", "output": "'no'", "id": "sample_440"}
{"code": "def f(x):\n    n = len(x)\n    i = 0\n    while i < n and x[i].isdigit():\n        i += 1\n    return i == n", "input": "'1'", "output": "True", "id": "sample_449"}
{"code": "def f(d, count):\n    new_dict = {}\n    for _ in range(count):\n        d = d.copy()\n        new_dict = {**d, **new_dict}\n    return new_dict", "input": "{'a': 2, 'b': [], 'c': {}}, 0", "output": "{}", "id": "sample_454"}
{"code": "def f(nums):\n    count = list(range(len(nums)))\n    for i in range(len(nums)):\n        nums.pop()\n        if len(count) > 0:\n            count.pop(0)\n    return nums", "input": "[3, 1, 7, 5, 6]", "output": "[]", "id": "sample_457"}
{"code": "def f(text, search_chars, replace_chars):\n    trans_table = str.maketrans(search_chars, replace_chars)\n    return text.translate(trans_table)", "input": "'mmm34mIm', 'mm3', ',po'", "output": "'pppo4pIp'", "id": "sample_458"}
{"code": "def f(text, amount):\n    length = len(text)\n    pre_text = '|'\n    if amount >= length:\n        extra_space = amount - length\n        pre_text += ' ' * (extra_space // 2)\n        return pre_text + text + pre_text\n    return text", "input": "'GENERAL NAGOOR', 5", "output": "'GENERAL NAGOOR'", "id": "sample_460"}
{"code": "def f(a, b, n):\n    result = m = b\n    for _ in range(n):\n        if m:\n            a, m = a.replace(m, '', 1), None\n            result = m = b\n    return result.join(a.split(b))", "input": "'unrndqafi', 'c', 2", "output": "'unrndqafi'", "id": "sample_468"}
{"code": "def f(nums, pop1, pop2):\n    nums.pop(pop1 - 1)\n    nums.pop(pop2 - 1)\n    return nums", "input": "[1, 5, 2, 3, 6], 2, 4", "output": "[1, 2, 3]", "id": "sample_479"}
{"code": "def f(text, value):\n    return text.removeprefix(value.lower())", "input": "'coscifysu', 'cos'", "output": "'cifysu'", "id": "sample_489"}
{"code": "def f(d):\n    keys = []\n    for k in d:\n        keys.append('%s => %s' % (k, d[k]))\n    return keys", "input": "{'-4':'4','1':'2','-':'-3'}", "output": "['-4 => 4', '1 => 2', '- => -3']", "id": "sample_493"}
{"code": "def f(s):\n    if str.isascii(s[-5:]):\n        return s[-5:], s[0:][:3]\n    elif str.isascii(s[:5]):\n        return s[:5], s[-5:][3:]\n    else:\n        return s", "input": "'a1234år'", "output": "('a1234', 'år')", "id": "sample_495"}
{"code": "def f(n):\n    b = list(str(n))\n    for i in range(2,len(b)): b[i] += '+'\n    return b", "input": "44", "output": "['4', '4']", "id": "sample_497"}
{"code": "def f(nums, idx, added):\n    nums[idx:idx] = (added,)\n    return nums", "input": "[2, 2, 2, 3, 3], 2, 3", "output": "[2, 2, 3, 2, 3, 3]", "id": "sample_498"}
{"code": "def f(d):\n    result = [None] * len(d)\n    a = b = 0\n    while d:\n        result[a] = d.popitem(a == b)\n        a, b = b, (b+1) % len(result)\n    return result", "input": "{}", "output": "[]", "id": "sample_503"}
{"code": "def f(value, width):\n    if value >= 0:\n        return str(value).zfill(width)\n\n    if value < 0:\n        return '-' + str(-value).zfill(width)\n    return ''", "input": "5, 1", "output": "'5'", "id": "sample_509"}
{"code": "def f(strings, substr):\n    list = [s for s in strings if s.startswith(substr)]\n    return sorted(list, key=len)", "input": "['condor', 'eyes', 'gay', 'isa' ], 'd'", "output": "[]", "id": "sample_516"}
{"code": "def f(numbers):\n    floats = [n % 1 for n in numbers]\n    return floats if 1 in floats else []", "input": "range(100, 120)", "output": "[]", "id": "sample_522"}
{"code": "def f(dict0):\n    new = dict0.copy()\n    for i in range(len(new)-1):\n        dict0[sorted(new)[i]] = i\n    return dict0", "input": "{2: 5, 4: 1, 3: 5, 1: 3, 5: 1}", "output": "{2: 1, 4: 3, 3: 2, 1: 0, 5: 1}", "id": "sample_524"}
{"code": "def f(label1, char, label2, index):\n    m = label1.rindex(char)\n    if m >= index:\n        return label2[:m - index + 1]\n    return label1 + label2[index - m - 1:]", "input": "'ekwies', 's', 'rpg', 1", "output": "'rpg'", "id": "sample_526"}
{"code": "def f(s):\n    b = ''\n    c = ''\n    for i in s:\n        c = c + i\n        if s.rfind(c) > -1:\n            return s.rfind(c)\n    return 0", "input": "'papeluchis'", "output": "2", "id": "sample_528"}
{"code": "def f(n, array):\n    final = [array.copy()] \n    for i in range(n):\n        arr = array.copy()\n        arr.extend(final[-1])\n        final.append(arr)\n    return final", "input": "1, [1, 2, 3]", "output": "[[1, 2, 3], [1, 2, 3, 1, 2, 3]]", "id": "sample_532"}
{"code": "def f(n):\n    for n in str(n):\n        if n not in \"012\" and n not in list(range(5, 10)):\n            return False\n    return True", "input": "1341240312", "output": "False", "id": "sample_535"}
{"code": "def f(text, width):\n    return text[:width].center(width, 'z')", "input": "'0574', 9", "output": "'zzz0574zz'", "id": "sample_538"}
{"code": "def f(text):\n    return ''.join(list(text)).isspace()", "input": "' \\t  \\u3000'", "output": "True", "id": "sample_541"}
{"code": "def f(item):\n    modified = item.replace('. ', ' , ').replace('&#33; ', '! ').replace('. ', '? ').replace('. ', '. ')\n    return modified[0].upper() + modified[1:]", "input": "'.,,,,,. منبت'", "output": "'.,,,,, , منبت'", "id": "sample_543"}
{"code": "def f(text, speaker):\n    while text.startswith(speaker):\n        text = text[len(speaker):]\n    return text", "input": "'[CHARRUNNERS]Do you know who the other was? [NEGMENDS]', '[CHARRUNNERS]'", "output": "'Do you know who the other was? [NEGMENDS]'", "id": "sample_546"}
{"code": "def f(matrix):\n    matrix.reverse()\n    result = []\n    for primary in matrix:\n        max(primary)\n        primary.sort(reverse = True)\n        result.append(primary)\n    return result", "input": "[[1, 1, 1, 1]]", "output": "[[1, 1, 1, 1]]", "id": "sample_549"}
{"code": "def f(arr):\n    return list(reversed(arr))", "input": "[2, 0, 1, 9999, 3, -5]", "output": "[-5, 3, 9999, 1, 0, 2]", "id": "sample_554"}
{"code": "def f(str):\n    d = str.rpartition('ar')\n    return ' '.join((d[0], d[1], d[2]))", "input": "'xxxarmmarxx'", "output": "'xxxarmm ar xx'", "id": "sample_557"}
{"code": "def f(array, index, value):\n    array.insert(0, index + 1)\n    if value >= 1:\n        array.insert(index, value)\n    return array", "input": "[2], 0, 2", "output": "[2, 1, 2]", "id": "sample_570"}
{"code": "def f(input_string, spaces):\n    return input_string.expandtabs(spaces)", "input": "r'a\\tb', 4", "output": "'a\\\\tb'", "id": "sample_571"}
{"code": "def f(items):\n    result = []\n    for number in items:\n        d = dict(items).copy()\n        d.popitem()\n        result.append(d)\n        items = d\n    return result", "input": "[(1, 'pos')]", "output": "[{}]", "id": "sample_577"}
{"code": "def f(obj):\n    for k, v in obj.items():\n        if v >= 0:\n            obj[k] = -v\n    return obj", "input": "{'R': 0, 'T': 3, 'F': -6, 'K': 0}", "output": "{'R': 0, 'T': -3, 'F': -6, 'K': 0}", "id": "sample_578"}
{"code": "def f(text, char):\n    new_text = text\n    a = []\n    while char in new_text:\n        a.append(new_text.index(char))\n        new_text = new_text.replace(char,\"\",1)\n    return a", "input": "'rvr', 'r'", "output": "[0, 1]", "id": "sample_580"}
{"code": "def f(text, sign):\n    length = len(text)\n    new_text = list(text)\n    sign = list(sign)\n    for i in range(len(sign)):\n        new_text.insert((i * length - 1) // 2 + (i + 1) // 2, sign[i])\n    return ''.join(new_text)", "input": "'akoon', 'sXo'", "output": "'akoXoosn'", "id": "sample_581"}
{"code": "def f(k, j):\n    arr = []\n    for i in range(k):\n        arr.append(j)\n    return arr", "input": "7, 5", "output": "[5, 5, 5, 5, 5, 5, 5]", "id": "sample_582"}
{"code": "def f(text, char):\n    return text.rindex(char)", "input": "\"breakfast\", \"e\"", "output": "2", "id": "sample_586"}
{"code": "def f(arr): \n    counts = [0] * 9 \n    ans = [] \n    for ele in arr: counts[ele - 1] += 1 \n    for i in range(len(counts)): \n        while counts[i] > 0: \n            counts[i] -= 1 \n            ans.append(i + 1)\n    return counts, ans", "input": "[6, 3, 0, 7, 4, 8]", "output": "([0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 4, 6, 7, 8, 9])", "id": "sample_591"}
{"code": "def f(numbers):\n    new_numbers = []\n    for i, _ in enumerate(numbers):\n        new_numbers.append(numbers[len(numbers)-1-i])\n    return new_numbers", "input": "[11, 3]", "output": "[3, 11]", "id": "sample_592"}
{"code": "def f(nums, n):\n    pos = len(nums) - 1\n    for i in range(-len(nums), 0):\n        nums.insert(pos, nums[i])\n    return nums", "input": "[], 14", "output": "[]", "id": "sample_593"}
{"code": "def f(s):\n    return s.upper()", "input": "\"Jaafodsfa SOdofj AoaFjIs  JAFasIdfSa1\"", "output": "'JAAFODSFA SODOFJ AOAFJIS  JAFASIDFSA1'", "id": "sample_597"}
{"code": "def f(text, n):\n    length = len(text)\n    return text[length*(n%4):length ]", "input": "'abc', 1", "output": "''", "id": "sample_598"}
{"code": "def f(text):\n    result = ''\n    mid = (len(text) - 1) // 2\n    for i in range(mid):\n        result += text[i]\n    for i in range(mid, len(text)-1):\n        result += text[mid + len(text) - 1 - i]\n    return result.ljust(len(text), text[-1])", "input": "'eat!'", "output": "'e!t!'", "id": "sample_613"}
{"code": "def f(text, encoding):\n    try:\n        return text.encode(encoding)\n    except LookupError:\n        return str(LookupError)", "input": "'13:45:56', 'shift_jis'", "output": "b'13:45:56'", "id": "sample_621"}
{"code": "def f(text, rules):\n    for rule in rules:\n        if rule == '@':\n            text = text[::-1]\n        elif rule == '~':\n            text = text.upper()\n        elif text and text[len(text)-1] == rule:\n            text = text[0:len(text)-1]\n    return text", "input": "'hi~!', ['~', '`', '!', '&']", "output": "'HI~'", "id": "sample_623"}
{"code": "def f(text, char):\n    char_index = text.find(char)\n    result = []\n    if char_index > 0:\n        result = list(text[:char_index])\n    result.extend(list(char)+list(text[char_index+len(char):]))\n    return ''.join(result)", "input": "'llomnrpc', 'x'", "output": "'xllomnrpc'", "id": "sample_624"}
{"code": "def f(nums, delete):\n    nums.remove(delete)\n    return nums", "input": "[4, 5, 3, 6, 1], 5", "output": "[4, 3, 6, 1]", "id": "sample_628"}
{"code": "def f(text, num):\n    req = num - len(text)\n    text = text.center(num, '*')\n    return text[:req // 2: -req // 2]", "input": "'a', 19", "output": "'*'", "id": "sample_631"}
{"code": "def f(s, suffix):\n    if not suffix:\n        return s\n    while s.endswith(suffix):\n        s = s[:-len(suffix)]\n    return s", "input": "'ababa', 'ab'", "output": "'ababa'", "id": "sample_638"}
{"code": "def f(nums, target):\n    if nums.count(0):\n        return 0\n    elif nums.count(target) < 3:\n        return 1\n    else:\n        return nums.index(target)", "input": "[1, 1, 1, 2], 3", "output": "1", "id": "sample_645"}
{"code": "def f(list1, list2):\n    l = list1[:]\n    while len(l) > 0:\n        if l[-1] in list2:\n            l.pop()\n        else:\n            return l[-1]\n    return 'missing'", "input": "[0, 4, 5, 6], [13, 23, -5, 0]", "output": "6", "id": "sample_648"}
{"code": "def f(string, substring):\n    while string.startswith(substring):\n        string = string[len(substring):len(string)]\n    return string", "input": "'', 'A'", "output": "''", "id": "sample_650"}
{"code": "def f(string):\n    if not string or not string[0].isnumeric:\n        return 'INVALID'\n    cur = 0\n    for i in range(len(string)):\n        cur = cur * 10 + int(string[i])\n    return str(cur)", "input": "'3'", "output": "'3'", "id": "sample_652"}
{"code": "def f(letters):\n    a = [] \n    for i in range(len(letters)):\n        if letters[i] in a:\n            return 'no'\n        a.append(letters[i]) \n    return 'yes'", "input": "['b', 'i', 'r', 'o', 's', 'j', 'v', 'p']", "output": "'yes'", "id": "sample_656"}
{"code": "def f(text):\n    for punct in '!.?,:;':\n        if text.count(punct) > 1:\n            return 'no'\n        if text.endswith(punct):\n            return 'no'\n    return text.title()", "input": "\"djhasghasgdha\"", "output": "'Djhasghasgdha'", "id": "sample_657"}
{"code": "def f(bots):\n    clean = []\n    for username in bots:\n        if not username.isupper():\n            clean.append(username[:2] + username[-3:])\n    return len(clean)", "input": "['yR?TAJhIW?n', 'o11BgEFDfoe', 'KnHdn2vdEd', 'wvwruuqfhXbGis']", "output": "4", "id": "sample_659"}
{"code": "def f(num):\n    initial = [1]\n    total = initial\n    for _ in range(num):\n        total = [1] + [x+y for x, y in zip(total, total[1:])]\n        initial.append(total[-1])\n    return sum(initial)", "input": "3", "output": "4", "id": "sample_660"}
{"code": "def f(text):\n    return text[-1] + text[:-1]", "input": "'hellomyfriendear'", "output": "'rhellomyfriendea'", "id": "sample_668"}
{"code": "def f(t):\n    a, sep, b = t.rpartition('-')\n    if len(b) == len(a):\n        return 'imbalanced'\n    return a + b.replace(sep, '')", "input": "\"fubarbaz\"", "output": "'fubarbaz'", "id": "sample_669"}
{"code": "def f(string):\n    if string.isupper():\n        return string.lower()\n    elif string.islower():\n        return string.upper()\n    return string", "input": "\"cA\"", "output": "'cA'", "id": "sample_673"}
{"code": "def f(nums, sort_count):\n    nums.sort()\n    return nums[:sort_count]", "input": "[1, 2, 2, 3, 4, 5], 1", "output": "[1]", "id": "sample_675"}
{"code": "def f(text, length, index):\n    ls = text.rsplit(None, index)\n    return '_'.join([l[:length] for l in ls])", "input": "'hypernimovichyp', 2, 2", "output": "'hy'", "id": "sample_682"}
{"code": "def f(array, elem):\n    return array.count(elem) + elem", "input": "[1, 1, 1], -2", "output": "-2", "id": "sample_685"}
{"code": "def f(nums):\n    l = []\n    for i in nums:\n        if i not in l:\n            l.append(i)\n    return l", "input": "[3, 1, 9, 0, 2, 0, 8]", "output": "[3, 1, 9, 0, 2, 8]", "id": "sample_688"}
{"code": "def f(d):\n    i = len(d) - 1\n    key = list(d.keys())[i]\n    d.pop(key, None)\n    return key, d", "input": "dict(e=1, d=2, c=3)", "output": "('c', {'e': 1, 'd': 2})", "id": "sample_694"}
{"code": "def f(text):\n    s = 0\n    for i in range(1, len(text)):\n        s += len(text.rpartition(text[i])[0])\n    return s", "input": "'wdj'", "output": "3", "id": "sample_696"}
{"code": "def f(text):\n    return len(text) - text.count('bot')", "input": "\"Where is the bot in this world?\"", "output": "30", "id": "sample_700"}
{"code": "def f(text, position):\n    length = len(text)\n    index = position % (length + 1)\n    if position < 0 or index < 0:\n        index = -1\n    new_text = list(text)\n    new_text.pop(index)\n    return ''.join(new_text)", "input": "'undbs l', 1", "output": "'udbs l'", "id": "sample_707"}
{"code": "def f(text):\n    my_list = text.split()\n    my_list.sort(reverse=True)\n    return ' '.join(my_list)", "input": "'a loved'", "output": "'loved a'", "id": "sample_709"}
{"code": "def f(playlist, liker_name, song_index):\n    playlist[liker_name] = playlist.get(liker_name, [])\n    playlist[liker_name].append(song_index)\n    return playlist", "input": "{'aki': ['1', '5']}, 'aki', '2'", "output": "{'aki': ['1', '5', '2']}", "id": "sample_710"}
{"code": "def f(array):\n    array.reverse()\n    array.clear()\n    array.extend('x'*len(array))\n    array.reverse()\n    return array", "input": "[3, -2, 0]", "output": "[]", "id": "sample_714"}
{"code": "def f(text):\n    t = text\n    for i in text:\n        text = text.replace(i, '')\n    return str(len(text)) + t", "input": "'ThisIsSoAtrocious'", "output": "'0ThisIsSoAtrocious'", "id": "sample_718"}
{"code": "def f(code):\n    lines = code.split(']')\n    result = []\n    level = 0\n    for line in lines:\n        result.append(line[0] + ' ' + '  ' * level + line[1:])\n        level += line.count('{') - line.count('}')\n    return '\\n'.join(result)", "input": "\"if (x) {y = 1;} else {z = 1;}\"", "output": "'i f (x) {y = 1;} else {z = 1;}'", "id": "sample_719"}
{"code": "def f(text):\n    ws = 0\n    for s in text:\n        if s.isspace():\n            ws += 1\n    return ws, len(text)", "input": "\"jcle oq wsnibktxpiozyxmopqkfnrfjds\"", "output": "(2, 34)", "id": "sample_726"}
{"code": "def f(sentence):\n    if sentence == '':\n        return ''\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    return sentence.capitalize().replace(' ', '')", "input": "'(A (b B))'", "output": "'Abb'", "id": "sample_735"}
{"code": "def f(text, characters):\n    for i in range(len(characters)):\n        text = text.rstrip(characters[i::len(characters)])\n    return text", "input": "\"r;r;r;r;r;r;r;r;r\", \"x.r\"", "output": "'r;r;r;r;r;r;r;r;'", "id": "sample_738"}
{"code": "def f(nums, p):\n    prev_p = p - 1\n    if prev_p < 0: prev_p = len(nums) - 1\n    return nums[prev_p]", "input": "[6, 8, 2, 5, 3, 1, 9, 7], 6", "output": "1", "id": "sample_741"}
{"code": "def f(text):\n    string_a, string_b = text.split(',')\n    return -(len(string_a) + (len(string_b)))", "input": "'dog,cat'", "output": "-6", "id": "sample_743"}
{"code": "def f(text, new_ending):\n    result = list(text)\n    result.extend(new_ending)\n    return ''.join(result)", "input": "'jro', 'wdlp'", "output": "'jrowdlp'", "id": "sample_744"}
{"code": "def f(address):\n    suffix_start = address.index('@') + 1\n    if address[suffix_start:].count('.') > 1:\n        address = address.removesuffix('.'.join(address.split('@')[1].split('.')[:2]))\n    return address", "input": "'minimc@minimc.io'", "output": "'minimc@minimc.io'", "id": "sample_745"}
{"code": "def f(d):\n    i = iter(d.items())\n    return next(i), next(i)", "input": "{'a': 123, 'b': 456, 'c': 789}", "output": "(('a', 123), ('b', 456))", "id": "sample_748"}
{"code": "def f(text, char, replace):\n    return text.replace(char, replace)", "input": "'a1a8', '1', 'n2'", "output": "'an2a8'", "id": "sample_757"}
{"code": "def f(text, sub):\n    index = []\n    starting = 0\n    while starting != -1:\n        starting = text.find(sub, starting)\n        if starting != -1:\n            index.append(starting)\n            starting += len(sub)\n    return index", "input": "'egmdartoa', 'good'", "output": "[]", "id": "sample_759"}
{"code": "def f(array):\n    output = array.copy()\n    output[0::2] = output[-1::-2]\n    output.reverse()\n    return output", "input": "[]", "output": "[]", "id": "sample_761"}
{"code": "def f(text):\n    text = text.lower()\n    capitalize = text.capitalize()\n    return text[:1] + capitalize[1:]", "input": "'this And cPanel'", "output": "'this and cpanel'", "id": "sample_762"}
{"code": "def f(nums, n):\n    return nums.pop(n)", "input": "[-7, 3, 1, -1, -1, 0, 4], 6", "output": "4", "id": "sample_773"}
{"code": "def f(num, name):\n    f_str = 'quiz leader = {}, count = {}'\n    return f_str.format(name, num)", "input": "23, 'Cornareti'", "output": "'quiz leader = Cornareti, count = 23'", "id": "sample_774"}
{"code": "def f(dictionary):\n    a = dictionary.copy()\n    for key in a:\n        if key%2 != 0:\n            del a[key]\n            a['$'+str(key)] = a[key]\n    return a", "input": "{}", "output": "{}", "id": "sample_776"}
{"code": "def f(names, excluded):\n    excluded = excluded\n    for i in range(len(names)):\n        if excluded in names[i]:\n            names[i] = names[i].replace(excluded, \"\")\n    return names", "input": "[\"avc  a .d e\"], \"\"", "output": "['avc  a .d e']", "id": "sample_777"}
{"code": "def f(ints):\n    counts = [0] * 301\n\n    for i in ints:\n        counts[i] += 1\n\n    r = []\n    for i in range(len(counts)):\n        if counts[i] >= 3:\n            r.append(str(i))\n    counts.clear()\n    return ' '.join(r)", "input": "[2, 3, 5, 2, 4, 5, 2, 89]", "output": "'2'", "id": "sample_780"}
{"code": "def f(input):\n    for char in input:\n        if char.isupper():\n            return False\n    return True", "input": "\"a j c n x X k\"", "output": "False", "id": "sample_782"}
{"code": "def f(text, n):\n    if n < 0 or len(text) <= n:\n        return text\n    result = text[0 : n]\n    i = len(result) - 1\n    while i >= 0:\n        if result[i] != text[i]:\n            break\n        i -= 1\n    return text[0 : i + 1]", "input": "'bR', -1", "output": "'bR'", "id": "sample_789"}
{"code": "def f(d):\n    r = {\n        'c': d.copy(),\n        'd': d.copy()\n    }\n    return (r['c'] is r['d'], r['c'] == r['d'])", "input": "{'i': 1, 'love': 'parakeets'}", "output": "(False, True)", "id": "sample_790"}
{"code": "def f(l1, l2):\n    if len(l1) != len(l2):\n        return {}\n    return dict.fromkeys(l1, l2)", "input": "['a', 'b'], ['car', 'dog']", "output": "{'a': ['car', 'dog'], 'b': ['car', 'dog']}", "id": "sample_792"}
